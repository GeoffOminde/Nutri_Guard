# NutriGuard - Docker Compose Configuration
# Complete development and production environment setup

version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: nutriguard_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-nutriguard_root_pass}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-nutriguard}
      MYSQL_USER: ${MYSQL_USER:-nutriguard_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-nutriguard_pass}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database_setup.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    networks:
      - nutriguard_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-nutriguard_root_pass}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: nutriguard_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nutriguard_network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-nutriguard_redis_pass}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # NutriGuard Application
  app:
    build: .
    container_name: nutriguard_app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      # Flask Configuration
      FLASK_ENV: ${FLASK_ENV:-production}
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      
      # Database Configuration
      DATABASE_URL: mysql://${MYSQL_USER:-nutriguard_user}:${MYSQL_PASSWORD:-nutriguard_pass}@mysql:3306/${MYSQL_DATABASE:-nutriguard}
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-nutriguard_redis_pass}@redis:6379/0
      RATELIMIT_STORAGE_URL: redis://:${REDIS_PASSWORD:-nutriguard_redis_pass}@redis:6379/1
      
      # API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY}
      
      # Payment Configuration
      INTASEND_PUBLIC_KEY: ${INTASEND_PUBLIC_KEY}
      INTASEND_SECRET_KEY: ${INTASEND_SECRET_KEY}
      INTASEND_ENVIRONMENT: ${INTASEND_ENVIRONMENT:-sandbox}
      
      # Email Configuration
      MAIL_SERVER: ${MAIL_SERVER:-smtp.gmail.com}
      MAIL_PORT: ${MAIL_PORT:-587}
      MAIL_USE_TLS: ${MAIL_USE_TLS:-True}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
    
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    networks:
      - nutriguard_network
    
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health', timeout=10)"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: nutriguard_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./static:/var/www/nutriguard/static:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - nutriguard_network
    profiles:
      - production

  # Monitoring - Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: nutriguard_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - nutriguard_network
    profiles:
      - monitoring

  # Monitoring - Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: nutriguard_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - nutriguard_network
    profiles:
      - monitoring

# Networks
networks:
  nutriguard_network:
    driver: bridge

# Volumes
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local